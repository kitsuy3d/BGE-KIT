from bge import logic as G
import math

scene = G.getCurrentScene()
own = G.getCurrentController().owner

cam = scene.active_camera
wtc = cam.world_to_camera

own['rota'] = math.degrees(cam.localOrientation.to_euler().x)

if 'init' not in own:
    set = cam.projection_matrix * wtc
    own['prev'] = set
    own['init'] = True
set = (cam.projection_matrix * wtc)
cameraMatrix = own['prev']


own['x0'] = cameraMatrix[0][0]
own['x1'] = cameraMatrix[0][1]
own['x2'] = cameraMatrix[0][2]
own['x3'] = cameraMatrix[0][3]
own['x4'] = cameraMatrix[1][0]# + F
own['x5'] = cameraMatrix[1][1]
own['x6'] = cameraMatrix[1][2]# + S
own['x7'] = cameraMatrix[1][3]
own['x8'] = cameraMatrix[2][0]# + T
own['x9'] = cameraMatrix[2][1]
own['x10'] = cameraMatrix[2][2]# + L
own['x11'] = cameraMatrix[2][3]
own['x12'] = cameraMatrix[3][0]
own['x13'] = cameraMatrix[3][1]
own['x14'] = cameraMatrix[3][2]
own['x15'] = cameraMatrix[3][3]

cameraMatrix = set.inverted()

own['w0'] = cameraMatrix[0][0]
own['w1'] = cameraMatrix[0][1]
own['w2'] = cameraMatrix[0][2]
own['w3'] = cameraMatrix[0][3]
own['w4'] = cameraMatrix[1][0]
own['w5'] = cameraMatrix[1][1]
own['w6'] = cameraMatrix[1][2]
own['w7'] = cameraMatrix[1][3]
own['w8'] = cameraMatrix[2][0]
own['w9'] = cameraMatrix[2][1]
own['w10'] = cameraMatrix[2][2]
own['w11'] = cameraMatrix[2][3]
own['w12'] = cameraMatrix[3][0]
own['w13'] = cameraMatrix[3][1]
own['w14'] = cameraMatrix[3][2]
own['w15'] = cameraMatrix[3][3]

own['prev'] = set