//Post Processing Motion blur by Ahmad Fatih (@kitebizelt)
//based on 'Motion Blur as a Post-Processing Effect' by @Gilberto_Rosado from Rainbow Studios
//Last Updated: 6/23/2016
//Version 1.2
//
//Use the Motion Blur as you like 

float nSamples = 8.0; //'the more high it goes, the more smooth it looks, but low fps'
uniform float distance = 0.2; //'the distance of the blur'
float strength = 20.0; //'the distance of the blur'
//float maxRadius = 1.0; //'not used at the moment'
bool vs = false; //'show the with vs without version?'
bool showVelocity = false; //'visualize the moving direction?'

uniform sampler2D bgl_DepthTexture;
uniform sampler2D bgl_RenderedTexture;

// 'x = previous'
uniform float x0, x1, x2, x3,
              x4, x5, x6, x7,
              x8, x9, x10,x11,
              x12,x13,x14,x15;
//'w = current-inverse'
uniform float w0, w1, w2, w3,
              w4, w5, w6, w7,
              w8, w9, w10,w11,
              w12,w13,w14,w15;
              
mat4 viewProjectionInverse = mat4(w0,w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12,w13,w14,w15);
mat4 y = inverse(viewProjectionInverse);
mat4 previousViewProjection1 = mat4(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,y[3][0],y[3][1],y[3][2],y[3][3]);
mat4 previousViewProjection2 = mat4(y[0][0],y[0][1],y[0][2], y[0][3],
                                    y[1][0],y[1][1],y[1][2], y[1][3],
                                    y[2][0],y[2][1],y[2][2], y[2][3],
                                    x12,x13,x14, x15);
vec2 texCoord = gl_TexCoord[0].xy; //'set the coords'
vec4 fixArtifacts(vec4 u){
    u = ((u-1.)*max(1.,0.));
    u = u+1.;
    return u;
}
vec2 velocity(mat4 u, vec4 w, vec4 c){
    vec4 y = w * u; // 'get previous view coordinate by multiplying CurrentWorldPos * PreviousViewPos'
    y /= y.w;  // 'accurating'
    vec2 e = (c - y).xy; //'get the velocity'
    return e;
}

void main() {
    
    vec4 depth = texture2D(bgl_DepthTexture, texCoord);  // 'get the depth texture'
    vec4 H = vec4(texCoord.x * 2. - 1., (1. - texCoord.y) * 2. - 1., depth.r, 1.); // 'get the view space coordinate'
    vec4 D = H * viewProjectionInverse;  //'get the world space coordinate by mul(viewWorldSpace * viewSpaceInverse) = world space'
    vec4 worldPos = D / D.w; //'accurating world space coordinate'
   
    vec4 currentPos = H / H.w;  
    
    vec2 velocity1 = velocity(previousViewProjection1,worldPos,currentPos);
    vec2 velocity2 = velocity(previousViewProjection2,worldPos,currentPos);
    
    strength /= 10.0;
    velocity1.y *= 2.0;
    velocity1 *= strength;
    velocity2 *= strength*2.;
    velocity2.x = -velocity2.x;
    velocity2.y = -velocity2.y;
    
    vec4 result = texture2D(bgl_RenderedTexture, texCoord);
    for (int i = 1; i < int(nSamples); ++i) {
        float alg = (float(i) / float(nSamples - 1.) - 0.5);
        vec2 offset = ((velocity1-velocity2) * alg);
        
        vec2 co = texCoord + (offset*distance);
        vec4 zi = texture2D(bgl_RenderedTexture, texCoord + offset*distance);
        if((co.x > 1.0)||(co.x < 0.0)){
            zi = texture2D(bgl_RenderedTexture, gl_TexCoord[0].xy);
        }
        if((co.y > 1.0)||(co.y < 0.0)){
            zi = texture2D(bgl_RenderedTexture, gl_TexCoord[0].xy);
        }
        if((co.x < 0.0 || co.y < 0.0) || (co.x > 1.0 || co.y > 1.0)){
            zi = fixArtifacts(zi);
        }
        result += zi;
    }
    result /= nSamples;
    if (!showVelocity){
        if(texCoord.x < 0.5 && vs){
            gl_FragColor = texture2D(bgl_RenderedTexture, texCoord);
        } else {
            gl_FragColor = result;
        }
    } else {
        gl_FragColor = (texture2D(bgl_RenderedTexture, texCoord)/4.)+vec4(((velocity1.r)*8.)*depth.r,((velocity1.g)*8.)*depth.r,0.0,1.0);
    }
}
